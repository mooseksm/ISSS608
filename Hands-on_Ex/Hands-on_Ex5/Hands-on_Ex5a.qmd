---
title: "Hands-on Exercise 5A"
date: January 6, 2024
date-modified: "last-modified"
toc: true
execute:
  eval: true
  echo: true
  warning: false
---

# 5 Creating Ternary Plot with R

## 5.1 Overview

Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) Its display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.

In this hands-on, I will build a ternary plot programmatically using R for visualising and analysing population structure of Singapore.

The hands-on exercise consists of four steps:

-   Install and launch **tidyverse** and **ggtern** packages.

-   Derive three new measures using *mutate()* function of **dplyr** package.

-   Build a static ternary plot using *ggtern()* function of **ggtern** package.

-   Build an interactive ternary plot using *plot-ly()* function of **Plotly R** package.

## 5.2 Installing and Launching R packages

Two main R packages will be used in this hands-on exercise, they are:

-   [**ggtern**](http://www.ggtern.com/), a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.

-   [**Plotly R**](https://plot.ly/r/), an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The **plotly R** libary contains the *ggplotly* function, which will convert **ggplot2** figures into a Plotly object.

Selected **tidyverse** family packages namely: **readr**, **dplyr** and **tidyr** will also be installed and loaded.

::: callout-important
In this exercise, version 3.2.1 of **ggplot2** will be installed instead of the latest version of **ggplot2**. This is because the current version of **ggtern** package is not compatible to the latest version of **ggplot2**.
:::

The code chunk below will accomplish the task:

```{r}
pacman::p_load(plotly,ggtern,tidyverse)
```

## 5.3 Data Preparation

### 5.3.1 The Data

For the purpose of this hands-on exercise, the [Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data) data will be used. The data set has been downloaded and included in the data sub-folder of the hands-on exercise folder. It is called *respopagsex2000to2018_tidy.csv* and is in csv file format.

### 5.3.2 Importing Data

To important *respopagsex2000to2018_tidy.csv* into R, ***read_csv()*** function of **readr** package will be used.

```{r}
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv")

str(pop_data)
pop_data
```

### 5.3.3 Preparing the Data

Next, use the ***mutate()*** function of **dplyr** package to derive three new measures, namely: young, active, and old. The "Year" variable was also converted from numerical data type to character data type.

```{r}
agpop_mutated <- pop_data %>%
  mutate("Year"=as.character(Year))%>%
  spread(AG,Population) %>%
  mutate(YOUNG = rowSums(.[4:8]))%>%
  mutate(ACTIVE = rowSums(.[9:16]))%>%
  mutate(OLD = rowSums(.[17:21]))%>%
  mutate(TOTAL = rowSums(.[22:24]))%>%
  filter(Year == 2018)%>%
  filter(TOTAL > 0)

agpop_mutated
```

## 5.4 Plotting Ternary Diagram with R

## 5.4.1 Plotting a static ternary diagram

Use ***ggtern()*** function of **ggtern** package to create a simple ternary plot.

```{r}
ggtern(data=agpop_mutated,
       aes(x=YOUNG,
           y=ACTIVE,
           z=OLD))+
  geom_point()+
  labs(title="Population Structure, 2018")
```

We can adjust the theme of the static ternary plot as follows:

```{r}
ggtern(data=agpop_mutated,
       aes(x=YOUNG,
           y=ACTIVE,
           z=OLD))+
  geom_point()+
  labs(title="Population Structure, 2018")+
  theme_rgbw()
```

## 5.4.2 Plotting an interactive ternary diagram

The code below create an interactive ternary plot using ***plot_ly()*** function of **Plotly R**.

::: {.callout-note}
Attempt was made to label the hover text according to the different categorisation.
:::

```{r}
#reusable function for creating annotation object
label <- function(txt) {
  list(
    text=txt,
    x=0.1, y= 1,
    ax=0, ay=0,
    xref="paper",yref="paper",
    align="center",
    font=list(family="serif",size=15,color="black"),
    bgcolor="plum",bordercolor="black",borderwidth=2)
}

#reusable function for axis formatting
axis <- function(txt) {
  list(
    title=txt, tickformat=".0%",tickfont=list(size=10)
  )
}

ternaryAxes <- list(
  aaxis=axis("Active"),
  baxis=axis("Young"),
  caxis=axis("Old")
)

#Initiating a plotly visualisation
plot_ly(
  agpop_mutated,
  a=~ACTIVE,
  b=~YOUNG,
  c=~OLD,
  color=I("black"),
  type="scatterternary",
  text = ~paste('Active:',sep='', round((ACTIVE/TOTAL)*100,1),'%',
                '<br>Young:',
                round((YOUNG/TOTAL)*100,1),'%', '<br>Old:',
                round((OLD/TOTAL)*100,1),'%')
  )%>%
  layout(
    annotations = label("Population Structure, 2018"),
    ternary=ternaryAxes
  )
```