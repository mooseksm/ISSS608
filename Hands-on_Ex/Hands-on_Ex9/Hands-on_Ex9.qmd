---
title: "Hands-on Exercise 9"
date: March 17, 2024
date-modified: "last-modified"
toc: true
execute:
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
---

# Information Dashboard Design: R methods

## 9.1 Overview

By the end of this hands-on exercise, I would have

-   created a bullet chart by using ggplot2,

-   created sparklines by using ggplot2 ,

-   built an industry standard dashboard by using R Shiny.

## 9.2 Getting Started

For the purpose of this hands-on exercise, I will use the following R packages:

-   [tidyverse](https://www.tidyverse.org/) provides a collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data. It is not a single package but a collection of modern R packages including but not limited to [readr](https://readr.tidyverse.org/), [tidyr](https://tidyr.tidyverse.org/), [dplyr](https://dplyr.tidyverse.org/), [ggplot](https://ggplot2.tidyverse.org/), [tibble](https://tibble.tidyverse.org/), [stringr](https://stringr.tidyverse.org/), [forcats](https://forcats.tidyverse.org/) and [purrr](https://purrr.tidyverse.org/).

-   [lubridate](https://r4va.netlify.app/chap31) provides functions to work with dates and times more efficiently.

-   [ggthemes](https://r4va.netlify.app/chap31) is an extension of ggplot2. It provides additional [themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) beyond the basic themes of ggplot2.

-   [gtExtras](https://jthomasmock.github.io/gtExtras/) provides some additional helper functions to assist in creating beautiful tables with [gt](https://gt.rstudio.com/), an R package specially designed for anyone to make wonderful-looking tables using the R programming language.

-   [reactable](https://glin.github.io/reactable/) provides functions to create interactive data tables for R, based on the [React Table](https://github.com/tanstack/table/tree/v7) library and made with [reactR](https://github.com/react-R/reactR).

-   [reactablefmtr](https://kcuilla.github.io/reactablefmtr/) provides various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customizable functions and themes.

-   [svglite](v)

```{r}
pacman::p_load(tidyverse,lubridate,ggthemes,gt,gtExtras,reactable,reactablefmtr,svglite)
```

## 9.3 Importing Microsoft Access database

### 9.3.1 The dataset

For the purpose of this study, a personal database in Microsoft Access mdb format called *Coffee Chain* will be used.

### 9.3.2 Data Preparation

The code chunk below is used to import *CoffeeChain.rds* into R:

```{r}
coffeechain <- read_rds("data/rds/CoffeeChain.rds")

glimpse(coffeechain)

DT::datatable(coffeechain)
```

The following code chunk is used to aggregate Sales and Budgeted Sales at the Product level:

```{r}
product <- coffeechain %>%
  group_by(`Product`) %>%
  summarise(`target`=sum(`Budget Sales`),
            `current`=sum(`Sales`)) %>%
  ungroup()
```

### 9.3.3 Bullet chart in ggplot2

The code chunk below is used to plot the bullet charts using ggplot2 functions:

```{r}
ggplot(product,
       aes(Product,current))+
  geom_col(aes(Product,max(target)*1.01),
           fill="grey85",width=0.85)+
  geom_col(aes(Product,target*0.75),
           fill="grey60",width = 0.85)+
  geom_col(aes(Product,target*0.5),
           fill="grey50",width = 0.85)+
  geom_col(aes(Product,current),
           width = 0.35,
           fill = "black")+
  geom_errorbar(aes(x=Product,
                    y=target,
                    ymin=target,
                    ymax=target),
                width = 0.4,
                colour = "red",
                size = 1)+
  coord_flip()+
  ggtitle("Sales and Budgeted Sales by Product")
```

## 9.4 Plotting sparklines using ggplot2

### 9.4.1 Preparing the data

We first generate the sales report of product by month:

```{r}
salesreport <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  mutate(Month = month(Date)) %>%
  group_by(Month,Product) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup() %>%
  select(Month,Product,Sales)
```

The code chunk below is used to compute the minimum, maximum sales for each product as well as the sales of products in the last month of the dataset:

```{r}
mins <- group_by(salesreport,Product) %>%
  slice(which.min(Sales))

maxs <- group_by(salesreport,Product) %>%
  slice(which.max(Sales))

ends <- group_by(salesreport,Product) %>%
  filter(Month == max(Month))
```

The code chunk below is used to compute the 25th and 75th quantile:

```{r}
quarts <- salesreport %>%
  group_by(Product) %>%
  summarise(quart1 = quantile(Sales,
                              0.25),
            quart2 = quantile(Sales,
                              0.75)) %>%
  right_join(salesreport)
```

### 9.4.2 sparklines in ggplot2

```{r}
ggplot(salesreport,aes(x=Month,
                       y=Sales)) +
  facet_grid(Product ~.,scales = "free_y") +
  geom_ribbon(data = quarts,aes(ymin=quart1,max=quart2),
              fill="grey90")+
  geom_line(size=0.3)+
  geom_point(data=mins,col="red")+
  geom_point(data=maxs,col="blue")+
  geom_text(data=mins,aes(label=Sales),vjust=-1)+
  geom_text(data=maxs,aes(label=Sales),vjust=2.5)+
  geom_text(data=ends,aes(label=Sales),hjust=0,nudge_x=0.5)+
              geom_text(data=ends,aes(label=Product),hjust=0,nudge_x=1.0)+
              expand_limits(x=max(salesreport$Month)+
                              (0.25*max(salesreport$Month)-min(salesreport$Month)))+
              scale_x_continuous(breaks=seq(1,12,1))+
              scale_y_continuous(expand = c(0.1,0))+
              theme_tufte(base_size = 3,base_family = "Helvetica")+
              theme(axis.title = element_blank(),axis.text.y = element_blank(),
                    axis.ticks=element_blank(),strip.text = element_blank())
```

## 9.5 Static Information Dashboard Design: gt and gtExtras methods

In this section, I will create a static information dashboard by using [gt](https://gt.rstudio.com/) and [gtExtras](https://jthomasmock.github.io/gtExtras/) packages.

### 9.5.1 Plotting a simple bullet chart

```{r}
product %>%
  gt::gt() %>%
  gt_plt_bullet(column = current,
                target = target,
                width = 60,
                palette = c("lightblue",
                            "black")) %>%
  gt_theme_538()
```

## 9.6 sparklines: gtExtras method

Before we can prepare the sales report by product by using gtExtras functions, code chunk below will be used to prepare the data:

```{r}
report <- coffeechain %>%
  mutate(Year=year(Date)) %>%
  filter(Year == "2013") %>%
  mutate(Month = month(Date,
                       label = TRUE,
                       abbr = TRUE)) %>%
  group_by(Product, Month) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup()
```

It is important to note that one of the requirement of gtExtras functions is that they almost exclusively require you to pass a data.frame as list columns. In view of this, code chunk below will be used to convert the report data.frame into list columns.

```{r}
report %>%
  group_by(Product) %>%
  summarise(`Monthly Sales`=list(Sales),
            .groups="drop")
```

### 9.6.1 Plotting coffeechain salesreport

```{r}
report %>%
  group_by(Product) %>%
  summarise(`Monthly Sales`=list(Sales),
            .groups="drop") %>%
  gt() %>%
  gt_plt_sparkline(`Monthly Sales`,
                  same_limit = FALSE)
```

### 9.6.2 Adding statistics

First, calculate summary statistics by using the code chunk below:

```{r}
report %>%
  group_by(Product) %>%
  summarise("Min"=min(Sales,na.rm=T),
            "Max"=max(Sales,na.rm=T),
            "Average"=mean(Sales,na.rm=T)) %>%
  gt() %>%
  fmt_number(columns = 4,
             decimals = 2)
```

### 9.6.3 Combining the data.frame

```{r}
spark <- report %>%
  group_by(Product) %>%
  summarise(`Monthly Sales`=list(Sales),
            .groups = "drop")
```

```{r}
sales <- report %>%
  group_by(Product) %>%
  summarise("Min"=min(Sales,na.rm=T),
            "Max"=max(Sales,na.rm=T),
            "Average"=mean(Sales,na.rm=T))
```

```{r}
sales_data = left_join(sales,spark)
```

### 9.6.4 Plotting the updated data.table

```{r}
sales_data %>%
  gt() %>%
  gt_plt_sparkline(`Monthly Sales`,
                  same_limit = FALSE)
```

### 9.6.5 Combining bullet chart and sparklines

Similarly, the bullet chart and sparklines can be combined as follows:

```{r}
bullet <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  group_by(`Product`) %>%
  summarise(`Target`=sum(`Budget Sales`),
            `Actual`=sum(`Sales`)) %>%
  ungroup()
```

```{r}
sales_data = sales_data %>%
  left_join(bullet)
```

```{r}
sales_data %>%
  gt() %>%
  gt_plt_sparkline(`Monthly Sales`) %>%
  gt_plt_bullet(column = Actual,
                target = Target,
                width = 28,
                palette = c("lightblue",
                            "black")) %>%
  gt_theme_538()
```

## 9.7 Interactive Information Dashboard Design: reactable and reactablefmtr methods

In this section, I will create an interactive information dashboard by using [reactable](https://glin.github.io/reactable/) and [reactablefmtr](https://kcuilla.github.io/reactablefmtr/) packages.

In order to build an interactive sparklines, the dataui R package will need to be installed:

```{r}
remotes::install_github("timelyportfolio/dataui")
```

```{r}
library(dataui)
```

### 9.7.1 Plotting interactive sparklines

Similar to gtExtras, to plot an interactive sparklines by using reactablefmtr package we need to prepare the list field by using the code chunk below.

```{r}
report <- report %>%
  group_by(Product) %>%
  summarise(`Monthly Sales`=list(Sales))
```

```{r}
reactable(
  report,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(report)
    )
  )
)
```

### 9.7.2 Changing the pagesize

By default the pagesize is 10. In the code chunk below, arguments defaultPageSize is used to change the default setting.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(report)
    )
  )
)
```

### 9.7.3 Adding points and labels 

In the code chunk below `highlight_points` argument is used to show the minimum and maximum values points and `label` argument is used to label first and last values.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(report,
                             highlight_points = highlight_points(
                               min="red",max="blue"),
                             labels = c("first","last")
                             ))
    )
  )
```

### 9.7.4 Adding a reference line

In the code chunk below `statline` argument is used to show the mean line.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        statline = "mean"
        )
    )
  )
)
```

### 9.7.5 Adding bandline

Instead adding reference line, bandline can be added by using the `bandline` argument.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        line_width = 1,
        bandline = "innerquartiles",
        bandline_color = "green"
        )
    )
  )
)
```

### 9.7.6 Changing from sparkline to sparkbar

Instead of displaying the values as sparklines, we can display them as sparkbars as shown below.

```{r}
reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkbar(
        report,
        highlight_bars = highlight_bars(
          min = "red", max = "blue"),
        bandline = "innerquartiles",
        statline = "mean")
    )
  )
)
```
