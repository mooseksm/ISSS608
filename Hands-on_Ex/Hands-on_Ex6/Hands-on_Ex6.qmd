---
title: "Hands-on Exercise 6"
date: February 18, 2024
date-modified: "last-modified"
toc: true
execute:
  eval: true
  echo: true
  warning: false
---

# Visualising and Analysing Time-oriented Data

## 6.1 Learning Outcomes

By the end of this hands-on exercise, I would have created the following data visualisations by using R packages:

-   a calender heatmap by using [ggplot2](https://ggplot2.tidyverse.org/) functions,

-   a cycle plot by using ggplot2 function,

-   a slopegraph

-   a horizon chart

## 6.2 Installing R Packages

```{r}
pacman::p_load(scales,viridis,lubridate,ggthemes,gridExtra,readxl,knitr,data.table,tidyverse)
```

## 6.3 Plotting Calendar Heatmap

In this section, I will plot a calender heatmap programmatically by using the ggplot2 package.

![](images/clipboard-109595281.png)

By the end of this section, I would have:

-   plotted a calender heatmap by using ggplot2 functions and extension,

-   wrote a function using R programming,

-   derived specific date and time-related fields by using base R and lubridate packages

-   performed data preparation by using tidyr and dplyr packages.

### 6.3.1 The Data

For the purpose of this hands-on exercise, the *eventlog.csv* file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.

### 6.3.2 Importing the data

The code chunk below imports the *eventlog.csv* file into the R environment and saves it as a dataframe named *attacks*.

```{r}
attacks <- read_csv("data/eventlog.csv")
```

### 6.3.3 Examining the data structure

It is always a good practice to examine the imported data frame before further analysis is performed.

*kable()* can be used to review the structure of the imported data frame.

```{r}
kable(head(attacks))
```

There are three columns, namely *timestamp*, *source_country* and *tz*.

-   *timestamp* field stores date-time values in POSIXct format.

-   *source_country* field stores the source of the attack. It is in *ISO 3166-1 alpha-2* country code.

-   *tz* field stores time zone of the source IP address.

### 6.4.4 Data Preparation

Step 1: Deriving *weekday* and *hour of day* fields

Before plotting the calender heatmap, we derive two new fields *wkday* and *hour*. A function is written to perform this task.

```{r}
make_hr_wkday <- function(ts,sc,tz) {
  real_times <- ymd_hms(ts,
                        tz=tz[1],
                        quiet = TRUE)
  dt <- data.table(source_country = sc,
                   wkday = weekdays(real_times),
                   hour = hour(real_times))
  return(dt)
}
```

::: callout-note
-   [`dmy_hms()`](https://lubridate.tidyverse.org/) is used instead of [`ymd_hms()`](https://lubridate.tidyverse.org/reference/ymd_hms.html) as the format of the date on my computer is in the form of the former and not latter

-   [`ymd_hms()`](https://lubridate.tidyverse.org/reference/ymd_hms.html) and [`hour()`](https://lubridate.tidyverse.org/reference/hour.html) are from [**lubridate**](https://lubridate.tidyverse.org/) package, and

-   [`weekdays()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/weekdays) is a **base** R function.
:::

Step 2: Deriving the attacks tibble data frame

```{r}
wkday_levels <- c('Saturday','Friday',
                  'Thursday','Wednesday',
                  'Tuesday','Monday','Sunday')

attacks <- attacks %>%
  group_by(tz) %>%
  do(make_hr_wkday(.$timestamp, 
                   .$source_country, 
                   .$tz)) %>% 
  ungroup() %>%
  mutate(wkday = factor(
    wkday, levels = wkday_levels),
    hour = factor(
      hour, levels = 0:23))
```

::: callout-note
Beside extracting the necessary data into *attacks* data frame, `mutate()` of **dplyr** package is used to convert *wkday* and *hour* fields into **factor** so they’ll be ordered when plotting.
:::

Table below shows the tidy tibble table after processing:

```{r}
kable(head(attacks))
```

### 6.3.5 Building the calendar heatmaps

::: panel-tabset
## With theme_tufte()

```{r}
grouped <- attacks %>%
  count(wkday,hour) %>%
  ungroup() %>%
  na.omit()

grouped

ggplot(grouped,
       aes(hour,
           wkday,
           fill = n)) +
  geom_tile(color = "white",
            size = 0.1) +
  theme_tufte(base_family = "Helvetica") +
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                      low = "sky blue",
                      high = "dark blue") +
  labs(x = NULL,
       y = NULL,
       title ="Attacks by weekday and time of day") +
  theme(axis.ticks=element_blank(),
        plot.title=element_text(hjust=0.5),
        legend.title=element_text(size=8),
        legend.text = element_text(size=6))
```

## Without theme_tufte()

```{r}
ggplot(grouped,
       aes(hour,
           wkday,
           fill = n)) +
  geom_tile(color = "white",
            size = 0.1) +
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                      low = "sky blue",
                      high = "dark blue") +
  labs(x = NULL,
       y = NULL,
       title ="Attacks by weekday and time of day") +
  theme(axis.ticks=element_blank(),
        plot.title=element_text(hjust=0.5),
        legend.title=element_text(size=8),
        legend.text = element_text(size=6))
```
:::

::: callout-tip
## Things to learn from the code chunk

-   a tibble data table called *grouped* is derived by aggregating the attacks by *wkday* and *hour*.

-   a new field called *n* is derived by using `group_by()` and `count()` functions.

-   `na.omit()` is used to exclude missing value.

-   `geom_tile()` is used to plot tiles (grids) at each x and y position. `color` and `size` arguments are used to specify the border color and line size of the tiles.

-   [`theme_tufte()`](https://jrnold.github.io/ggthemes/reference/theme_tufte.html) of [**ggthemes**](https://jrnold.github.io/ggthemes/reference/) package is used to remove unnecessary chart junk. A version of the code without the line is used to visualise the components of default ggplot2 that would have been included had [`theme_tufte()`](https://jrnold.github.io/ggthemes/reference/theme_tufte.html)`not been used.`

-   `coord_equal()` is used to ensure the plot will have an aspect ratio of 1:1.

-   `scale_fill_gradient()` function is used to creates a two colour gradient (low-high).
:::

### 6.3.6 Building Multiple Calendar Heatmaps

This section involves building multiple heatmaps for the top four countries with the highest number of attacks.

![](images/clipboard-1322619897.png)

### 6.3.7 Creating data table for top 4 countries with highest number of attacks

Step 1: Deriving attack by country object

To identify the top 4 countries with the highest number of attacks, the following steps are required:

-   count the number of attacks by country,

-   calculate the percent of attacks by country, and

-   save the results in a tibble data frame.

```{r}
attacks_by_country <- count(
  attacks,source_country) %>%
  mutate(percent = percent(n/sum(n))) %>%
  arrange(desc(n))

attacks_by_country
```

Step 2: Preparing the tidy data frame

In this step, I will extract the attack records of the top 4 countries from *attacks* data frame and save the data in a new tibble data frame (i.e. *top4_attacks*).

```{r}
top4 <- attacks_by_country$source_country[1:4]
top4_attacks <- attacks %>%
  filter(source_country %in% top4) %>%
  count(source_country,wkday,hour) %>%
  ungroup() %>%
  mutate(source_country = factor(
    source_country,levels=top4)) %>%
  na.omit()

top4
top4_attacks
```

### 6.3.8 Plotting Multiple Calendar Heatmaps

Step 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.

```{r}
ggplot(top4_attacks,
       aes(hour,
           wkday,
           fill=n)) +
  geom_tile(color="white",
            size=0.1)+
 theme_tufte(base_family="Helvetica")+
  coord_equal()+
  scale_fill_gradient(name="# of attacks",
                      low="sky blue",
                      high="dark blue")+
  facet_wrap(~source_country,ncol=2)+
  labs(x=NULL,y=NULL,
       title="Attacks on top 4 countries by weekday and time of day")+
  theme(axis.ticks=element_blank(),
        axis.text.x=element_text(size=7),
        plot.title=element_text(hjust=0.5),
        legend.title = element_text(size=8),
        legend.text=element_text(size=6))
```

## 6.4 Plotting Cycle Plot

In this section, I will plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.

![](images/clipboard-4115758163.png)

### 6.4.1 Step 1: Data Import

For the purpose of this exercise, *arrivals_by_air.xlsx* will be used.

The code chunk below imports *arrivals_by_air.xlsx* by using `read_excel()` of **readxl** package and saves it as a tibble data frame called *air*.

```{r}
air <- read_excel("data/arrivals_by_air.xlsx")
```

### 6.4.2 Step 2: Deriving month and year fields

Next, two new fields called *month* and *year* are derived from the *Month-Year* field.

```{r}
air$month <- factor(month(air$`Month-Year`),
                    levels=1:12,
                    labels=month.abb,
                    ordered=TRUE)
air$year <- year(ymd(air$`Month-Year`))
```

### 6.4.3 Step 4: Extracting the target country

Next, the code chunk below is use to extract data for the target country (i.e. Vietnam)

```{r}
Vietnam <- air %>%
  select(`Vietnam`,
         month,
         year) %>%
  filter(year >= 2010)
```

### 6.4.4 Step 5: Computing the average arrivals by month and by year

The code chunk below uses `group_by()` and `summarise()` of **dplyr** to compute average arrivals by month and by year:

```{r}
hline.data <- Vietnam %>%
  group_by(month) %>%
  summarise(avgvalue = mean(`Vietnam`))
```

### 6.4.5 Step 6: Plotting the cycle plot

The code chunk below is used to plot the cycle plot:

```{r}
ggplot() + 
  geom_line(data=Vietnam,
            aes(x=year, 
                y=`Vietnam`, 
                group=month), 
            colour="black") +
  geom_hline(aes(yintercept=avgvalue), 
             data=hline.data, 
             linetype=6, 
             colour="red", 
             size=0.5) + 
  facet_grid(~month) +
  labs(axis.text.x = element_blank(),
       title = "Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019") +
  xlab("Year") +
  ylab("No. of Visitors") +
  theme_tufte(base_family = "Helvetica")+
  theme(axis.text.x=element_text(angle=90))
```

## 6.5 Plotting slopegraph

In this section, I will plot a [slopegraph](https://www.storytellingwithdata.com/blog/2020/7/27/what-is-a-slopegraph) by using R.

Prior to starting, I will install and load **CGPfunctions** onto the R environment. [Using newggslopegraph](https://cran.r-project.org/web/packages/CGPfunctions/vignettes/Using-newggslopegraph.html) provides more information about the function. More about`newggslopegraph()` and its arguments can be learnt by referring to this [link](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3/topics/newggslopegraph).

### 6.5.1 Step 1: Installing CGPfunctions

```{r}
pacman::p_load(CGPfunctions)
```

### 6.5.2 Step 2: Data Import

```{r}
rice <- read_csv("data/rice.csv")
```

### 6.5.3 Step 3: Plotting the slopegraph

Next, the code chunk below will be used to plot a basic slopegraph:

```{r}
rice %>% 
  mutate(Year = factor(Year)) %>%
  filter(Year %in% c(1961, 1980)) %>%
  newggslopegraph(Year, Yield, Country,
                Title = "Rice Yield of Top 11 Asian Countries",
                SubTitle = "1961-1980",
                Caption = "Prepared by: Kock Si Min")
```

::: callout-tip
## Learning point from code chunk above

For effective data visualisation design, `factor()` is used convert the value type of *Year* field from numeric to factor.
:::
