---
title: "Hands-on Exercise 4B"
date: January 28, 2024
date-modified: "last-modified"
toc: true
execute:
  eval: true
  echo: true
  warning: false
---

# 4 Visual Statistical Analysis

## 4.1 Learning Outcome

In this hands-on exercise, I will be using:

-   [ggstatsplot](https://indrajeetpatil.github.io/ggstatsplot/) package to create visual graphics with rich statistical information,

-   [performance](https://easystats.github.io/performance/) package to visualise model diagnostics, and

-   [parameters](https://easystats.github.io/parameters/) package to visualise model parameters

## 4.2 Visual Statistical Analysis with ggstatsplot

-   [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/) is an extension of [**ggplot2**](https://ggplot2.tidyverse.org/) package for creating graphics with details from statistical tests included in the information-rich plots themselves.

    -   To provide alternative statistical inference methods by default.

    -   To follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting.

## 4.3 Getting Started

## 4.3.1 Installing and launching R packages

In this exercise, **ggstatsplot** and **tidyverse** will be used.

```{r}
pacman::p_load(ggstatsplot,tidyverse)
```

### 4.3.2 Importing data

```{r}
exam <- read_csv("data/Exam_data.csv")
exam
```

### 4.3.3 One-sample test: *gghistostats()* method

In the code chunk below, [*gghistostats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/gghistostats.html) is used to to build an visual of one-sample test on English scores.

```{r}
#| eval: false
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  xlab = "English scores",
  title="Distribution of English scores"
)
```

```{r,echo=FALSE}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  xlab = "English scores",
  title="Distribution of English scores"
)
```

Default information: - statistical details - Bayes Factor - sample sizes - distribution summary

### 4.3.4 Unpacking the Bayes Factor

-   A Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.

-   That’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.

-   When we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10.

<!-- -->

-   The [**Schwarz criterion**](https://www.statisticshowto.com/bayesian-information-criterion/) is one of the easiest ways to calculate rough approximation of the Bayes Factor.

### 4.3.5 How to interpret Bayes Factor

A **Bayes Factor** can be any positive number. 

### 4.3.6 Two-sample mean test: *ggbetweenstats()*

In the code chunk below, [*ggbetweenstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for two-sample mean test of Maths scores by gender.

```{r}
#| eval: false
ggbetweenstats(
  data = exam,
  x = GENDER, 
  y = MATHS,
  type = "np",
  messages = FALSE,
  title="Distribution of Maths Scores by Gender"
)
```

```{r,echo=FALSE}
ggbetweenstats(
  data = exam,
  x = GENDER, 
  y = MATHS,
  type = "np",
  messages = FALSE,
  title="Distribution of Maths Scores by Gender"
)
```

Default information: - statistical details - Bayes Factor - sample sizes - distribution summary

### 4.3.7 Oneway ANOVA test: *ggbetweenstats()* method

In the code chunk below, [*ggbetweenstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for One-way ANOVA test on English score by race.

```{r}
#| eval: false
ggbetweenstats(
  data = exam,
  x = RACE, 
  y = ENGLISH,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE,
  title="Distribution of English Scores by Race"
)
```

```{r, echo=FALSE}
ggbetweenstats(
  data = exam,
  x = RACE, 
  y = ENGLISH,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE,
  title="Distribution of English Scores by Race"
)
```

-   “ns” → only non-significant

-   “s” → only significant

-   “all” → everything

### 4.3.7.1 ggbetweenstats - Summary of tests

<To add in>

### 4.3.8 Significant Test of Correlation: *ggscatterstats()*

In the code chunk below, [*ggscatterstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggscatterstats.html) is used to build a visual for Significant Test of Correlation between Maths scores and English scores.

```{r}
#| eval: false
ggscatterstats(
  data = exam,
  x = MATHS,
  y = ENGLISH,
  marginal = FALSE,
  title="Distribution of English scores vs Math scores"
  )
```

```{r,echo=FALSE}
ggscatterstats(
  data = exam,
  x = MATHS,
  y = ENGLISH,
  marginal = FALSE,
  title="Distribution of English scores vs Math scores"
  )
```

### 4.3.9 Significant Test of Association (Dependence): *ggbarstats()* methods

In the code chunk below, the Maths scores is binned into a 4-class variable by using [*cut()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cut).

```{r}
exam1 <- exam %>% 
  mutate(MATHS_bins = 
           cut(MATHS, 
               breaks = c(0,60,75,85,100))
)
```

In this code chunk below [*ggbarstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbarstats.html) is used to build a visual for Significant Test of Association.

```{r}
#| eval: false
ggbarstats(exam1, 
           x = MATHS_bins, 
           y = GENDER,
           title="Distribution of Math Scores by Gender"
           )
```

```{r,echo=FALSE}
#| eval: false
ggbarstats(exam1, 
           x = MATHS_bins, 
           y = GENDER,
           title="Distribution of Math Scores by Gender"
           )
```

## 4.4 Visualising Models

In this section, we will visualise model diagnostic and model parameters by using the parameters package.

-   Toyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.

## 4.5 Getting Started

## 4.6 Installing and loading the required libraries

```{r}
pacman::p_load(readxl,performance,parameters,see)
```

### 4.6.1 Importing Excel file: readxl methods

In the code chunk below, [*read_xls()*](https://readxl.tidyverse.org/reference/read_excel.html) of [**readxl**](https://readxl.tidyverse.org/) package is used to import the data worksheet of `ToyotaCorolla.xls` workbook into R.

```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls", 
                       "data")
car_resale
```

Notice that the output object `car_resale` is a tibble data frame.

### 4.6.2 Multiple Regression Model using lm()

The code chunk below is used to calibrate a multiple linear regression model by using *lm()* of Base Stats of R.

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```

### 4.6.3 Model Diagnostic: Checking for multicollinearity

In the code chunk, [*check_collinearity()*](https://easystats.github.io/performance/reference/check_collinearity.html) of [**performance**](https://easystats.github.io/performance/) package.

```{r}
check_collinearity(model)
```

```{r}
check_c <- check_collinearity(model)
plot(check_c)
```

### 4.6.4 Model Diagnostic: checking normality assumption

In the code chunk, [*check_normality()*](https://easystats.github.io/performance/reference/check_normality.html) of [**performance**](https://easystats.github.io/performance/) package.

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)
```

```{r}
check_n <- check_normality(model1)
```

```{r}
plot(check_n)
```

### 4.6.5 Model Diagnostic: Check model for homogeneity of variances

In the code chunk, [*check_heteroscedasticity()*](https://easystats.github.io/performance/reference/check_heteroscedasticity.html) of [**performance**](https://easystats.github.io/performance/) package.

```{r}
check_h <- check_heteroscedasticity(model1)
```

```{r}
plot(check_h)
```

### 4.6.6 Model Diagnostic: Complete check

We can also perform the complete by using [*check_model()*](https://easystats.github.io/performance/reference/check_model.html).

```{r,fig.width=10,fig.height=10}
check_model(model1)
```

### 4.6.7 Visualising Regression Parameters: see methods

In the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.

```{r}
plot(parameters(model1))
```

### 4.6.8 Visualising Regression Parameters: *ggcoefstats()* methods

In the code below, [*ggcoefstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcoefstats.html) of ggstatsplot package to visualise the parameters of a regression model.

```{r}
ggcoefstats(model1, 
            output = "plot")
```
