---
title: "Hands-on Exercise 4A"
date: January 28, 2024
date-modified: "last-modified"
toc: true
execute:
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
---

# 4 Visualising Distribution

## 4.1 Learning Outcome

Visualising distribution is not new in statistical analysis. Earlier in Hands-on Ex1, we explored some of the popular statistical graphics methods for visualising distribution, this includes the histogram, probability density curve (pdf), boxplot, notch plot and violin plot and understood how they can be created by using ggplot2.

In this hands-on exercise, we are going to explore two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.

## 4.2 Getting Started

### 4.2.1 Installing and loading the packages

The following R packages will be used:

-   [tidyverse](https://www.tidyverse.org/) a family of R packages for data science process,

-   [ggridges](https://wilkelab.org/ggridges/) a ggplot2 extension specially designed for plotting ridgeline plots, and

-   [ggdist](https://mjskay.github.io/ggdist/) for visualising distribution and uncertainty.

The code chunk is as follows:

```{r}
pacman::p_load(ggdist, ggridges, ggthemes,
               colorspace, tidyverse)
```

::: callout-note
## Notes from Prof Kam

Advise not to have anything running in background when installing packages.
:::

### 4.2.2 Data import

For the purpose of this exercise, *Exam_data.csv* will be used:

```{r}
exam <- read_csv("data/Exam_data.csv")
```

## 4.3 Visualising Distribution with Ridgeline Plot

Ridgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.

The figure below is a ridgelines plot showing the distribution of English score by class:

```{r,echo=FALSE}
ggplot(exam,
       aes(x=ENGLISH,
           y=CLASS))+
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten("grey",0.3),
    color = "black"
  )+
  scale_x_continuous(
    name = "English grades",
    expand = c(0,0)
  ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2,2.6)))+
  theme_ridges()+
  labs(
    title="Distribution of English scores across the different classes",
       y = "Class")
```

::: callout-note
-   Ridgeline plots make sense when the number of group to represent is **medium to high**, in which case a classic window separation would take too much space. The overlapping of groups in a ridgeline plot would allow for more efficient use of space. If there are less than 5 groups, it is advisable to use other types of distribution plots.

-   It works well when there is a clear pattern in the result, i.e. if there is an obvious ranking in groups. Otherwise, the groups will tend to overlap each other, leading to a messy plot not providing any insight.
:::

::: callout-note
## Notes from Prof Kam

Ridgeline plot allow distribution by category - need to have at least 2 variables (1 continuous, 1 categorical)
:::

### 4.3.1 Plotting ridgeline graph: ggridges method

There are several ways to plot ridgeline plot with R. In this section, we will plot ridgeline plot by using the [ggridges](https://wilkelab.org/ggridges/) package.

ggridges package provides two main geom to plot gridgeline plots, they are: [`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html) and [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and draws those using ridgelines.

::: callout-note
## Notes from Prof Kam

Ridgeline is an absolute line plot, can see exact value when impose interactivity. However for density ridges, is the interpolated value/smoothing value, not exact value - best not to impose interactivity. Neither is better than the other, is more of how you want to present data to user.
:::

The ridgeline plot below is plotted by using `geom_density_ridges()`.

::: panel-tabset
## The plot {.unlisted}

```{r,echo=FALSE}
ggplot(exam,
       aes(x=ENGLISH,
           y=CLASS))+
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten("cadetblue2",0.3),
    color = "white"
  )+
  scale_x_continuous(
    name = "English grades",
    expand = c(0,0)
  ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2,2.6)))+
  theme_ridges()+
  labs(
    title="Distribution of English scores across the different classes",
       y = "Class")
```

## The code chunk {.unlisted}

```{r}
#| eval: false
ggplot(exam,
       aes(x=ENGLISH,
           y=CLASS))+
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten("cadetblue2",0.3),
    color = "white"
  )+
  scale_x_continuous(
    name = "English grades",
    expand = c(0,0)
  ) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2,2.6)))+
  theme_ridges()+
  labs(
    title="Distribution of English scores across the different classes",
       y = "Class")
```
:::

::: callout-note
## Notes from Prof Kam

Ridgeline plot will always need "height" values to be indicated - density ridges does not require this as the height is the interpolated value.

Allow for observations as such: - Upper and lower limit of 3B is similar/only slightly shorter than 3A which indicate that poorer students in 3A not very much different than students in 3B. However, the better students in 3A fare better than those in 3B. The variation of student performance is 3B is lesser. - 3H has 2 humps - one group of students that perform well, and another group that fare poorer.

These distributions allow more information to be put in i.e. variations in colour below.
:::

### 4.3.2 Varying fill colors along the x axis

Sometimes we would like to have the area under a ridgeline plot not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) or [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html). Both geoms work just like `geom_ridgeline()` and `geom_density_ridges()`, except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have either changing fill colors or transparency but not both.

::: panel-tabset
## The plot {.unlisted}

```{r,echo=FALSE}
ggplot(exam,
       aes(x=ENGLISH,
           y=CLASS,
           fill=stat(x)))+
  geom_density_ridges_gradient(
    scale=3,
    rel_min_height=0.01)+
  scale_fill_viridis_c(name="Score",
                       option="C")+
  scale_x_continuous(
    name="English grades",
    expand=c(0,0)
  )+
  scale_y_discrete(name=NULL,expand=expansion(add=c(0.2,2.6)))+
  theme_ridges()+
  labs(title = "Distribution of English grades by class",
       x="Class")
```

## The code chunk {.unlisted}

```{r}
#| eval: false
ggplot(exam,
       aes(x=ENGLISH,
           y=CLASS,
           fill=stat(x)))+
  geom_density_ridges_gradient(
    scale=3,
    rel_min_height=0.01)+
  scale_fill_viridis_c(name="Score",
                       option="C")+
  scale_x_continuous(
    name="English grades",
    expand=c(0,0)
  )+
  scale_y_discrete(name=NULL,expand=expansion(add=c(0.2,2.6)))+
  theme_ridges()+
  labs(title = "Distribution of English grades by class",
       x="Class")
```
:::

### 4.3.3 Mapping the probabilities directly onto colour

Beside providing additional geom objects to support the plotting of ridgeline plot, ggridges package also provides a stat function called [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html) that replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) of ggplot2.

Figure below is plotted by mapping the probabilities calculated by using `stat(ecdf)` which represent the empirical cumulative density function for the distribution of English score.

::: panel-tabset
## The plot {.unlisted}

```{r,echo=FALSE}
ggplot(exam,
       aes(x=ENGLISH,
           y=CLASS,
           fill=0.5-abs(0.5-stat(ecdf))))+
         stat_density_ridges(geom="density_ridges_gradient",
                             calc_ecdf = TRUE)+
         scale_fill_viridis_c(name = "Tail probability",
                              direction=-1)+
         theme_ridges()+
         labs(
           title="Distribution of English Scores by Class")
```

## The code chunk {.unlisted}

```{r}
#| eval: false
ggplot(exam,
       aes(x=ENGLISH,
           y=CLASS,
           fill=0.5-abs(0.5-stat(ecdf))))+
         stat_density_ridges(geom="density_ridges_gradient",
                             calc_ecdf = TRUE)+
         scale_fill_viridis_c(name = "Tail probability",
                              direction=-1)+
         theme_ridges()+
         labs(
           title="Distribution of English Scores by Class")
```
:::

::: callout-important
It is important include the argument `calc_ecdf = TRUE` in `stat_density_ridges()`.
:::

::: callout-note
## Notes from Prof Kam

Observations from probability: - Top 10% students in 3A perform better than those in 3B. - Bottom 10% students in 3A and 3B perform similarly.
:::

### 4.3.4 Ridgeline plots with quantile lines

By using [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html), we can colour the ridgeline plot by quantile, via the calculated `stat(quantile)` aesthetic as shown in the figure below.

::: panel-tabset
## The plot {.unlisted}

```{r,echo=FALSE}
ggplot(exam,
       aes(x=ENGLISH,
           y=CLASS,
           fill=factor(stat(quantile))))+
  stat_density_ridges(
    geom="density_ridges_gradient",
    calc_ecdf=TRUE,
    quantiles = 4,
    quantile_lines = TRUE)+
  scale_fill_viridis_d(name = "Quantiles")+
  theme_ridges()+
  labs(title="Distribution of English Scores by Class")
```

## The code chunk {.unlisted}

```{r}
#| eval: false
ggplot(exam,
       aes(x=ENGLISH,
           y=CLASS,
           fill=factor(stat(quantile))))+
  stat_density_ridges(
    geom="density_ridges_gradient",
    calc_ecdf=TRUE,
    quantiles = 4,
    quantile_lines = TRUE)+
  scale_fill_viridis_d(name = "Quantiles")+
  theme_ridges()+
  labs(title="Distribution of English Scores by Class")
```
:::

Instead of using numbers to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.

::: panel-tabset
## The plot {.unlisted}

```{r,echo=FALSE}
ggplot(exam,
       aes(x=ENGLISH,
           y=CLASS,
           fill=factor(stat(quantile))))+
  stat_density_ridges(
    geom="density_ridges_gradient",
    calc_ecdf = TRUE,
    quantiles = c(0.25,0.975))+
  scale_fill_manual(
    name="Probability",
    values=c("#FF0000A0", "#A0A0A0A0", "#0000FFA0"),
    labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]")
  ) +
  theme_ridges()+
  labs(title="Distribution of English Scores by Class")
```

## The code chunk {.unlisted}

```{r}
#| eval: false
ggplot(exam,
       aes(x=ENGLISH,
           y=CLASS,
           fill=factor(stat(quantile))))+
  stat_density_ridges(
    geom="density_ridges_gradient",
    calc_ecdf = TRUE,
    quantiles = c(0.25,0.975))+
  scale_fill_manual(
    name="Probability",
    values=c("#FF0000A0", "#A0A0A0A0", "#0000FFA0"),
    labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]")
  ) +
  theme_ridges()+
  labs(title="Distribution of English Scores by Class")
```
:::

## 4.4 Visualising Distribution with Raincloud Plot

Raincloud Plot is a data visualisation techniques that produces a half-density plot to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!

In this section, we will create a raincloud plot to visualise the distribution of English score by race. It will be created by using functions provided by ggdist and ggplot2 packages.

### 4.4.1 Plotting a half eye graph

First, we will plot a Half-Eye graph by using [`stat_halfeye()`](https://mjskay.github.io/ggdist/reference/stat_halfeye.html) of **ggdist** package.

This produces a Half Eye visualization, which is contains a half-density and a slab-interval.

::: panel-tabset
## The plot {.unlisted}

```{r,echo=FALSE}
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA)+
  ggtitle("Distribution of English Scores by Race")
```

## The code chunk {.unlisted}

```{r}
#| eval: false
ggplot(exam, 
       aes(x = RACE, 
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA)+
  ggtitle("Distribution of English Scores by Race")
```
:::

### 4.4.2 **Adding the boxplot with `geom_boxplot()`**

Next, we will add the second geometry layer using [`geom_boxplot()`](https://r4va.netlify.app/chap09) of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.

::: panel-tabset
## The plot {.unlisted}

```{r,echo=FALSE}
ggplot(exam,
       aes(x=RACE,
           y=ENGLISH))+
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA)+
  ggtitle("Distribution of English Scores by Race")
```

## The code chunk {.unlisted}

```{r}
#| eval: false
ggplot(exam,
       aes(x=RACE,
           y=ENGLISH))+
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA)+
  ggtitle("Distribution of English Scores by Race")
```
:::

### **4.4.3 Adding the Dot Plots with `stat_dots()`**

Next, we will add the third geometry layer using [`stat_dots()`](https://mjskay.github.io/ggdist/reference/stat_dots.html) of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.

::: panel-tabset
## The plot {.unlisted}

```{r,echo=FALSE}
ggplot(exam,
       aes(x=RACE,
           y=ENGLISH))+
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA)+
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)+
  ggtitle("Distribution of English Scores by Race")
```

## The code chunk {.unlisted}

```{r}
#| eval: false
ggplot(exam,
       aes(x=RACE,
           y=ENGLISH))+
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA)+
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)+
  ggtitle("Distribution of English Scores by Race")
```
:::

::: callout-note
## Notes from Prof Kam

Ridgeline plot alone don't allow you to see sample size, addition of dot plots allow you to visualise how many samples you have i.e. Chinese has more samples than Others. If all categories have similar sample size, can just use ridgeline plots. Prof does not advise using the [slab + dots interval](https://mjskay.github.io/ggdist/articles/slabinterval.html) which is similar to a dot plot visualisation as the purpose of visualisation is to show the distribution, not asking to count samples.
:::

### **4.4.4 Finishing touch**

Lastly, [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html) of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, `theme_economist()` of ggthemes package is used to give the raincloud chart a professional publishing standard look.

::: panel-tabset
## The plot {.unlisted}

```{r,echo=FALSE}
ggplot(exam,
       aes(x=RACE,
           y=ENGLISH))+
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA)+
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)+
  coord_flip()+
  theme_economist()+
  ggtitle("Distribution of English Scores by Race")
```

## The code chunk {.unlisted}

```{r}
#| eval: false
ggplot(exam,
       aes(x=RACE,
           y=ENGLISH))+
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA)+
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 2)+
    coord_flip()+
  theme_economist()+
  ggtitle("Distribution of English Scores by Race")
```
:::

::: callout-note
## Notes from Prof Kam

Suggest to go back and explore whether can wrap the above in ggplotly or ggiraph to impose interactivity.
:::
